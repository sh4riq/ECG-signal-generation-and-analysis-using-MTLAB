% ECG Signal Generation and Analysis
clear;
close all;
clc;

% Time parameters
fs = 1000; % Sampling frequency (Hz)
T = 10; % Duration (s)

% Generate dynamic ECG signal
[ecg, t] = generate_dynamic_ecg(fs, T);

% Add baseline wander and noise to the ECG signal
ecg_noisy = add_noise(ecg, t);

% Filter noisy ECG signal using a bandpass Butterworth filter
ecg_filtered = filter_ecg(ecg_noisy, fs);

% Detect R-peaks and calculate heart rate
[hr_bpm, r_peaks] = calculate_heart_rate(ecg_filtered, fs);

% Plot the ECG signals
plot_ecg_signals(t, ecg_noisy, ecg_filtered, hr_bpm, r_peaks, fs);

% Display average heart rate
fprintf('Average heart rate: %.2f bpm\n', mean(hr_bpm));

% Generate dynamic ECG signal
function [ecg, t] = generate_dynamic_ecg(fs, T)
    hr_min = 60; % Minimum heart rate (bpm)
    hr_max = 100; % Maximum heart rate (bpm)
    num_cycles = T * hr_min / 60; % Calculate the approximate number of cycles
    t_hr = linspace(0, T, num_cycles); % Time vector for heart rate changes
    hr = linspace(hr_min, hr_max, num_cycles); % Linearly interpolate heart rate between min and max
    % Preallocate ECG array
    ecg = zeros(1, fs * T);
    idx = 1;
    for i = 1:length(hr)
        f_ecg = hr(i) / 60; % ECG frequency (Hz)
        ecg_cycle = round(fs / f_ecg); % ECG cycle length in samples
        ecg_temp = ecg_cycle_gen(linspace(0, 1, ecg_cycle)); % Generate ECG cycle
        ecg(idx:idx + length(ecg_temp) - 1) = ecg_temp; % Append ECG cycle to signal
        idx = idx + length(ecg_temp);
    end
    % Trim ECG array to remove excess zeros
    ecg = ecg(1:find(ecg, 1, 'last'));
    t = 0:1/fs:(length(ecg)-1)/fs; % Adjust the time vector to match the ECG signal length
end

% Add baseline wander and noise to the ECG signal
function ecg_noisy = add_noise(ecg, t)
    bw_freq = 0.1; % Baseline wander frequency (Hz)
    bw_amp = 0.05; % Baseline wander amplitude
    baseline_wander = bw_amp * sin(2 * pi * bw_freq * t);
    noise_amp = 0.05; % Noise amplitude
    noise = noise_amp * randn(1, length(t));
    ecg_noisy = ecg + baseline_wander + noise;
end

% Filter noisy ECG signal using a bandpass Butterworth filter
function ecg_filtered = filter_ecg(ecg_noisy, fs)
    order = 2; % Filter order
    low_cutoff = 0.5; % Low cutoff frequency (Hz)
    high_cutoff = 50; % High cutoff frequency (Hz)
    Wn = [low_cutoff, high_cutoff] / (fs / 2); % Normalized cutoff frequencies
    [b, a] = butter(order, Wn, 'bandpass'); % Design Butterworth filter
    ecg_filtered = filter(b, a, ecg_noisy);
end

% Detect R-peaks and calculate heart rate
function [hr_bpm, r_peaks] = calculate_heart_rate(ecg_filtered, fs)
    % Adjust threshold value if necessary
    threshold = max(ecg_filtered) * 0.6; % Adjust threshold based on signal
    [~, r_peaks] = findpeaks(ecg_filtered, 'MinPeakHeight', threshold, 'MinPeakDistance', 0.5*fs);
    if length(r_peaks) > 1
        hr_samples = diff(r_peaks); % Difference between R-peak locations in samples
        hr_time = hr_samples / fs; % Convert to time (s)
        hr_bpm = 60 ./ hr_time; % Convert to beats per minute (bpm)
    else
        hr_bpm = []; % If no R-peaks are detected, return an empty array
    end
end

% Plot the ECG signals
function plot_ecg_signals(t, ecg_noisy, ecg_filtered, hr_bpm, r_peaks, fs)
    figure;
    subplot(3, 1, 1);
    plot(t, ecg_noisy);
    title('Noisy ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');
    subplot(3, 1, 2);
    plot(t, ecg_filtered);
    hold on;
    plot(r_peaks / fs, ecg_filtered(r_peaks), 'ro');
    title('Filtered ECG Signal and R-Peaks');
    xlabel('Time (s)');
    ylabel('Amplitude');
    subplot(3, 1, 3);
    if ~isempty(hr_bpm)
        plot(t(r_peaks(1:end-1)), hr_bpm);
    end
    title('Heart Rate');
    xlabel('Time (s)');
    ylabel('BPM');
end

% Generate a single ECG cycle using parameters
function y = ecg_cycle_gen(t)
    li = 30 / 72; % Default heart beat interval
    % P wave
    y = p_wav(t, 0.25, 0.09, 0.16, li);
    % Q wave
    y = y + q_wav(t, 0.025, 0.066, 0.166, li);
    % QRS complex
    y = y + qrs_wav(t, 1.6, 0.11, li);
    % S wave
    y = y + s_wav(t, 0.25, 0.066, 0.09, li);
    % T wave
    y = y + t_wav(t, 0.35, 0.142, 0.2, li);
    % U wave
    y = y + u_wav(t, 0.035, 0.0476, 0.433, li);
end

% Define wave functions
function y = p_wav(t, amplitude, duration, interval, li)
    y = amplitude * exp(-((t - interval) / duration).^2);
end

function y = q_wav(t, amplitude, duration, interval, li)
    y = -amplitude * exp(-((t - interval) / duration).^2);
end

function y = qrs_wav(t, amplitude, duration, li)
    y = amplitude * exp(-((t - li/2) / duration).^2);
end

function y = s_wav(t, amplitude, duration, interval, li)
    y = -amplitude * exp(-((t - interval) / duration).^2);
end

function y = t_wav(t, amplitude, duration, interval, li)
    y = amplitude * exp(-((t - interval) / duration).^2);
end

function y = u_wav(t, amplitude, duration, interval, li)
    y = amplitude * exp(-((t - interval) / duration).^2);
end
